/**
**  Utility for QCAfterUpdate, CaseBeforeUpdate, CaseBeforeInsert
**  1. Update case information.
    2. Auto track field history when Case record be changed.
    3. After add sub Complaint,the "Repeat
    Complaint Times" field of Parent Complaint plus 1
    4. If the Complaint is a promary complaint, sent a SMS to Customer.
** Created By: Bing Bai 
** Date: 2013-05-17
**Modified By : Chaos 
**Modified date : 2014-2-21 AS-Complaint_002(2014Release1.1)
**Last Modified date:
**/

public with sharing  class  CaseHelper{
    // MB complaint tracking fields
    public static final List<String> COLS_MB_TRACKING = new List<String>{'Case_Type__c', 
                                        'Case_SubType__c',
                                        'Case_Dealer__c',
                                        'Subject', 
                                        'Vehicle_Relationship__c', 
                                        'Vehicle_Brand__c', 
                                        'Vehicle_Class__c', 
                                        'Vehicle_Model__c',
                                        'VIN_Code__c', 
                                        'Vehicle_Source__c', 
                                        'Dealer_Contact__c',
                                        'Dealer_Case_Type__c',
                                        'Dealer_Case_SubType__c',
                                        'Case_RepeatCause__c', 
                                        'Repeat_Complaint_Times__c', 
                                        'Final__c', 
                                        'Results_Response__c', 
                                        'Description',
                                        'OwnerId',
                                        'Case_Department__c',
                                        'Follow_Up_Inquiry__c', 
                                        'Complaint_Date__c', 
                                        'Case_Involvement_MPC__c', 
                                        'Case_Source__c', 
                                        'ParentId', 
                                        'AccountId', 
                                        'Region__c', 
                                        'Handling_Level__c', 
                                        'Data_Source__c',
                                        'Data_Subsource__c', 
                                        'Case_Status__c', 
                                        'Progress_Status__c', 
                                        'Escalate_Date_to_RO__c', 
                                        'Escalate_Date_to_CO__c', 
                                        'Suspended_Date__c', 
                                        'Suspended_Reason__c', 
                                        'Overdue__c', 
                                        'Overdue_Reason__c', 
                                        'X1st_FP_Position_Release_Date__c', 
                                        'X2nd_FP_Position_Release_Date__c', 
                                        'SFPositionDate__c', 
                                        'FFPositionDate__c', 
                                        'Release_Date__c', 
                                        'Resolved_Date__c', 
                                        'Contact_Person__c', 
                                        'Perferred_Contact_Number__c', 
                                        'Contact_Person_Tele__c', 
                                        'Perferred_Contact_Email__c', 
                                        'Customer_Background_Info__c', 
                                        'Government_Background__c', 
                                        'Car_Owner__c', 
                                        'Gender__c', 
                                        'Occupation__c', 
                                        'Title__c', 
                                        'Owner_Tele__c', 
                                        'Date_of_Birth__c', 
                                        'Address__c', 
                                        'Licence_Number__c', 
                                        'Other_Brand__c', 
                                        'Owned_MB_Vehicle__c', 
                                        'Vehicle_In_Workshop__c', 
                                        'Dealer_Provides_Transport__c', 
                                        'Customer_Requests_Transport__c', 
                                        'Selling_Dealer__c', 
                                        'Order_No__c', 
                                        'Last_Known_Sales_Person__c', 
                                        'Date_of_Warranty_Expiry__c', 
                                        'Last_Known_Mileage__c', 
                                        'Date_of_1st_Registration__c', 
                                        'US_VIN__c', 
                                        'EU_VIN__c', 
                                        'Defective_Item__c', 
                                        'Defective_SubItem__c', 
                                        'Car_Type__c', 
                                        'Engine_Number__c', 
                                        'Special_Goodwill__c', 
                                        'Goodwill_Category__c', 
                                        'Goodwill_Details__c', 
                                        'Goodwill_Cost__c',
                                        'Ref_No_Central__c',
                                        'Ref_No_Regional__c',
                                        'Dealer_Case_Category__c',
                                        'Dealer_Feedback__c'
                                        };

    // Chrysler complaint tracking fields   
    public static final List<String> COLS_CHRYSLER_TRACKING = new List<String>{
                                        'Case_Type__c', 
                                        'Case_SubType__c',
                                        'Case_Dealer__c',
                                        'Subject', 
                                        'Vehicle_Relationship__c', 
                                        'Vehicle_Brand__c', 
                                        'Vehicle_Class__c', 
                                        'Vehicle_Model__c',
                                        'Dealer_Case_Type__c',
                                        'Dealer_Case_SubType__c',
                                        'VIN_Code__c',  
                                        'Vehicle_Source__c', 
                                        'Dealer_Contact__c', 
                                        'Case_RepeatCause__c',  
                                        'Repeat_Complaint_Times__c', 
                                        'Results_Response__c', 
                                        'Problem1__c', 
                                        'Problem2__c', 
                                        'Problem3__c', 
                                        'Problem4__c', 
                                        'Service_Station__c', 
                                        'Final__c', 
                                        'Result__c', 
                                        'Description',
                                        'OwnerId',
                                        'Case_Department__c'
                                        };
    
    // MB complaint record type id
    public static Id C_MB_RECORD_TYPE = Schema.SObjectType.Case.getRecordTypeInfosByName().get(UtilConstant.MB_COMPLAINT).getRecordTypeId();
    
    // Chrysler complaint record type id
    public static Id C_CHRYSLER_RECORD_TYPE = Schema.SObjectType.Case.getRecordTypeInfosByName().get(UtilConstant.CHRYSLER_COMPLAINT).getRecordTypeId();
    
    // Chrysler complaint record type id
    public static Id C_MBDA_RECORD_TYPE = Schema.SObjectType.Case.getRecordTypeInfosByName().get(UtilConstant.MBDA_COMPLAINT).getRecordTypeId();
    
    // Retail Campaign record type id
    public static Id RETAIL_CAMPAIGN_RECORD_TYPE = Schema.SObjectType.Case.getRecordTypeInfosByName().get(UtilConstant.RETAIL_CAMPAIGN).getRecordTypeId();
    
    /**
     *  Inquiry record type id
     */    
    public static Id C_INQUIRY_RECORD_TYPE = Schema.SObjectType.Case.getRecordTypeInfosByName().get(UtilConstant.INQUIRY).getRecordTypeId();
    
    public static String vehicleRelationship='Vehicle_Relationship__c';
    
    // MB complaint record type id
    //public static EmailTemplate E_MAIL_TEMP 
    //= [select id,body from EmailTemplate where
    // Name='Change Complaint Assignment To Dealer GateKeeper Notification'];                                  
   
    // error message
    //public static final String ERR_MSG_HAVEPARENT 
    //= 'This Vehicle has a same Complaint, please add it as parent case';
    
    // SMS content
    public static final String SMS_MSG_1 = 'Thank you for your call,your feedback from the Mercedes-Benz customer service hotline has received, officials will continue to investigate the situation,get in touch with you ASAP.['+'Mercedes-Benz Service Center 4008181188'+']';
   
    // Complaint is not a primary complaint reminder
    public static final String NOT_PRIMARY_REMINDER = 'This Complaint is not a primary complaint, please find the primary complaint.';
   
    // FILED OBJECT MAP
    public static Map<String, Schema.SObjectField> FLDOBJ_MAP = schema.SObjectType.Case.fields.getMap();    
    public static CaseTeamRole DealerRole = [select Id from CaseTeamRole where Name = 'Dealer' limit 1];
    public static CaseTeamRole CRMManagerRole = [select Id from CaseTeamRole where Name = 'CRM Manager' limit 1];
    public static Profile CURRENT_PROFILE = [select Id, Name from Profile where Id = :UserInfo.getProfileId()];
    public static List<UserRole> REGIONAL_CRM_MGR_USERS_ROLES = [Select Id, Name from UserRole Where Name like 'Regional CRM Mgr%'];
    //public static List<User> REGIONAL_CRM_MGR_USERS = [Select Id from User Where UserRoleId IN: REGIONAL_CRM_MGR_USERS_ROLES];
    public static List<QueueSobject> CENTRAL_REGIONAL_CASE_QUEUES = [select Id, QueueId from QueueSobject where SobjectType = 'Case' and (Queue.Name like 'Central Office%' or Queue.Name like 'Regional Office%')];
    public static List<QueueSobject> CENTRAL_CASE_QUEUES = [select Id, QueueId, Queue.Name from QueueSobject where SobjectType = 'Case' and Queue.Name like '%Central Office%'];
    public static string toString=' to ';
    public static string closedString='Closed';
    public static string cacString='CAC';
    public static string dealerString='Dealer';
    public static string yesString='Yes';  
    public static string sendEmailToGateKeeperString='sendemailtogatekeeper__c';
/**      
  * @Description:set information about Vehicle
  * @author :
  * @Date : 
  * @param Case record and Vehicle_Relationship__c record
  * @return  returns case record.
  * @see   caseHelper(setVehicleInfo();)
*/          

    public static Case setVehicleInfo(Case c, Vehicle_Relationship__c vr){
        
        If(vr.Vehicle_Brand__c != null && !String.isBlank(vr.Vehicle_Brand__c)) {
            c.Vehicle_Brand__c = vr.Vehicle_Brand__c;
        }
        if(vr.Vehicle_Class__c != null && !String.isBlank(vr.Vehicle_Class__c)) {
            c.Vehicle_Class__c = vr.Vehicle_Class__c;
        }
        if(vr.Vehicle_Model__c != null && !String.isBlank(vr.Vehicle_Class__c)) {
            c.Vehicle_Model__c = vr.Vehicle_Model__c;
        }
        if(vr.Vehicle_ID__r.UsVIN__c != null && !String.isBlank(vr.Vehicle_ID__r.UsVIN__c)) {
            c.VIN_Code__c = vr.Vehicle_ID__r.UsVIN__c;
        }
        c.Vehicle__c = vr.Vehicle_ID__c;
        If(vr.Vehicle_ID__r.UsVIN__c != null && !String.isBlank(vr.Vehicle_ID__r.UsVIN__c)) {
            c.US_VIN__c = vr.Vehicle_ID__r.UsVIN__c;
        }
       
       return setVehicleInfoDetails(c,vr);
        
        
    }
    /**      
  * @Description:set information about Vehicle & this method is created to reduce CyclomaticComplexity for setVehicleInfo method
  * @author :mohana raja reddy alla
  * @Date : 06/Oct/15
  * @param Case record and Vehicle_Relationship__c record
  * @return  returns case record.
  * @see   caseHelper(setVehicleInfo();)
*/       
    // this method is created to reduce CyclomaticComplexity for setVehicleInfo method
    public static Case setVehicleInfoDetails(Case c, Vehicle_Relationship__c vr)
    {
    
     if(vr.Vehicle_ID__r.EuroVIN__c != null && !String.isBlank(vr.Vehicle_ID__r.EuroVIN__c)) {
            c.EU_VIN__c = vr.Vehicle_ID__r.EuroVIN__c;
        }
        if(vr.Vehicle_ID__r.Latest_Sales_Person__c != null && !String.isBlank(vr.Vehicle_ID__r.Latest_Sales_Person__c)) {
            c.Last_Known_Sales_Person__c = vr.Vehicle_ID__r.Latest_Sales_Person__c;
        }
        if(vr.Vehicle_ID__r.Warranty_Start_Date__c != null) {
            c.Date_of_Warranty_Expiry__c = vr.Vehicle_ID__r.Warranty_Start_Date__c;
        }
        if(vr.Vehicle_ID__r.FirstRegistrationDate__c != null) {
            c.Date_of_1st_Registration__c = vr.Vehicle_ID__r.FirstRegistrationDate__c;
        }
        if(vr.Registration_Number__c != null && !String.isBlank(vr.Registration_Number__c)) {
            c.Registration_Number__c = vr.Registration_Number__c;
        }
        
      return c; 
    
    }
/**      
  * @Description:Creates new complaint Description for US-DPCR-004
  * @author :
  * @Date : 
  * @param Caseid and case filed label and case new filed label and case old filed label.
  * @return  Complaint_Description__c record.
  * @see   caseHelper(newCaseDescription();)
*/       
    
    
   // Creates new complaint Description for US-DPCR-004
    public static Complaint_Description__c newCaseDescription(Id caseId, String label, String newValue, String oldValue) {
        Complaint_Description__c cd = new Complaint_Description__c();
        cd.Case__c = caseId;
        cd.Created_By__c = UserInfo.getUserId();
        cd.Date_Time__c = System.now();
        cd.Action__c = 'Changed ' + label + ' from ' + oldValue + toString + newValue;
        return cd;
    }
  /**      
  * @Description:Creates new complaint historys for US-CC-002,US-CC-003.
  * @author :
  * @Date : 
  * @param Caseid and case filed label and case new filed label and case old filed label.
  * @return  Complaint_Description__c record.
  * @see   caseHelper(newCaseHistory();)
*/         
    // Creates new complaint historys for US-CC-002,US-CC-003.
    public static Complaint_Tracking__c newCaseHistory(Id caseId, String label, String newValue, String oldValue) {
        Complaint_Tracking__c ct = new Complaint_Tracking__c();
        ct.Case__c = caseId;
        ct.User__c = UserInfo.getUserId();
        ct.Action__c = 'Changed ' + label + ' from ' + oldValue + toString + newValue;
        return ct;
    }
  /**      
  * @Description: To delete ShareFrom Case
  * @author :
  * @Date : 
  * @param map of caseid,set of caseids
  * @return 
  * @see   caseHelper(deleteShareFromCase();)
*/       
 
    public static void deleteShareFromCase(Map<id,Set<Id>> casesToDeleteShare) {
      //  List<CaseShare> shareCases = new List<CaseShare>();
       // Map<Id, List<Id>> accountIdUserIds = new Map<Id, List<Id>>();
        List<Id> allAccountIds = new List<Id>();
        List<CaseTeamMember> caseTeamMembers = new List<CaseTeamMember>();
      //  List<Case> cases = new List<Case>();
        
        
        for(Id caseid : casesToDeleteShare.keySet()){
            allAccountIds.addAll(casesToDeleteShare.get(caseid));
        }
        
        List<User> usrList = [select id, AccountId from User 
                                where isActive=true 
                                and AccountId in :allAccountIds 
                                and (Profile.Name =: UtilConstant.DEALER_DELEGATE_ADMIN 
                        or Contact.Permission_Set_Settings__c includes ('Complaint_Management'))];
       
        
        for(CaseTeamMember ctm:[select id, ParentId from CaseTeamMember where MemberId in :usrList]){
            for(Id caseId : casesToDeleteShare.keySet()) {
                 if(ctm.ParentId == caseId){
                    caseTeamMembers.add(ctm);
                 }
            }
        }

        if(caseTeamMembers!=null && !caseTeamMembers.IsEmpty()) {
            UtilSobject.deleteSobjects(caseTeamMembers);
        }
    }
/**      
  * @Description:to get the Complaint GateKeeper Email.
  * @author :
  * @Date : 
  * @param set of Support_Dealer_1__c.
  * @return map of AccountId,Email
  * @see   caseHelper(getComplaintGateKeeperEmail();)
*/       
    
   public static Map<id,String> getComplaintGateKeeperEmail(Set<id> dealerAccounts){
        Map<id,String> accountAndKeeperEmail = new Map<id,String>(); 
       
        if (dealerAccounts.size() > 0) {
            
            for(User u :[select Id,AccountId, Email, ContactId from User 
                          where isActive = true and ContactId in 
                            (select Id from Contact where AccountId in :dealerAccounts 
                                                          and Dealer_Complaint_Gate_Keeper__c = true)]){
                if(!accountAndKeeperEmail.containsKey(u.AccountId)) {
                    accountAndKeeperEmail.put(u.AccountId, u.Email);
                }
            }
        }
        return accountAndKeeperEmail;
    }
/**      
  * @Description:To create Sms Tasks.
  * @author :
  * @Date : 
  * @param set of caseids and accountIds
  * @return NA
  * @see   caseHelper(createSmsTasks();)
*/           
 
    public static void createSmsTasks(Set<Id> caseIds, Set<Id> accIds) {
        List<Task> SMSTasks = new List<Task>();
        Map<Id, Id> accountIdContactIds = new Map<Id, Id>();
        Task smsTask;
        
        for(Contact con :[select Id, AccountId from Contact where AccountId in :accIds]) {
            accountIdContactIds.put(con.AccountId, con.Id);
        }
        
        for(Case c :[select Id, AccountId, Account.PersonMobilePhone, Account.SMSOptOut__pc from Case where Id in :caseIds and Account.PersonMobilePhone != null])
        {
            if(c.Account.SMSOptOut__pc){
                continue;
            }
            smsTask = new Task();
            smsTask.Subject = 'SMS';
            smsTask.Status = closedString;
            smsTask.Activity_Status__c = 'Sent';
            smsTask.RecordTypeId = Schema.SObjectType.task.getRecordTypeInfosByName().get(UtilConstant.SMS).getRecordTypeId();
            smsTask.WhatId = c.Id;
            if(accountIdContactIds.containsKey(c.AccountId)) {
                smsTask.WhoId = accountIdContactIds.get(c.AccountId);
            }
            smsTask.SMS_Content__c = SMS_MSG_1;
            smsTask.Phone__c = c.Account.PersonMobilePhone;
            SMSTasks.add(smsTask);
        }
        
        if(SMSTasks!=null && !SMSTasks.IsEmpty()) {
            UtilSobject.insertSobjects(SMSTasks);
        }
    }
 /**      
  * @Description:To create Case Description
  * @author :
  * @Date : 
  * @param list of cases
  * @return NA
  * @see   caseHelper(creatCaseDescription();)
*/           
    // creat a case description For US-CC-024
    public static void creatCaseDescription (List<case> casesForDescription) {
        List<Complaint_Description__c> CaseDescrptions = new List<Complaint_Description__c>();
        
        for(case c : casesForDescription) {
            CaseDescrptions.add(new Complaint_Description__c(Case__c = c.id, Created_By__c = c.CreatedbyId, Description__c = c.Description, Date_Time__c = system.now(), Action__c = 'Created'));
        }      
        if(CaseDescrptions!=null && !CaseDescrptions.IsEmpty()) {
            UtilSobject.insertSobjects(CaseDescrptions);
        }
    }
 /**      
  * @Description:To create Case Description
  * @author :
  * @Date : 
  * @param map of caseid for old and new values
  * @return NA
  * @see   CaseHelperTest(CaseHelper.shareDealer();)
*/        
    public static void shareDealer(Map<Id, Id> casesForShare) {
        List<CaseShare> cs = new List<CaseShare>();
        Map<Id, Id> DealeridCaseid = new Map<Id, Id>();
        Map<Id, Id> UseridCaseid = new Map<Id, Id>();
       
        
        for(Case c :[select id, Case_Dealer__c from Case where id in :casesForShare.keyset()]) {
            DealeridCaseid.put(c.Case_Dealer__c, casesForShare.get(c.id));
        }
        
        
        for(Account a : [select id, OwnerId from Account where id in :DealeridCaseid.keyset()]) {
            UseridCaseid.put(a.OwnerId, DealeridCaseid.get(a.id));
        }
        
        for(Id i : UseridCaseid.keyset()) {
            cs.add(new CaseShare(CaseId = UseridCaseid.get(i), UserOrGroupId = i));
        }
        
        if(cs!=null && !cs.IsEmpty()) {
            UtilSobject.insertSobjects(cs);
        }
    }
/**      
  * @Description:Share Case to RO when a case escalate from RO to CO
  * @author :
  * @Date : 
  * @param map of case.Id,case.Previous_Owner__c
  * @return NA
  * @see   CaseHelper(shareCaseToRO();)
*/            
  // Share Case to RO when a case escalate from RO to CO For US-CC-019    
    public static void shareCaseToRO(Map<Id, Id> casesToShare) {
       // List<CaseShare> shareCases = new List<CaseShare>();
        Map<Id, Set<Id>> caseIdExistUserIds = new Map<Id, Set<Id>>();
        List<CaseTeamMember> caseTeamMembers = new List<CaseTeamMember>();
        
        for(caseTeamMember cs :[select ParentId, MemberId from caseTeamMember where ParentId in :casesToShare.keySet()]) {
            if(!caseIdExistUserIds.containsKey(cs.ParentId)) {
                caseIdExistUserIds.put(cs.ParentId, new Set<Id>());
            }
            caseIdExistUserIds.get(cs.ParentId).add(cs.MemberId);
        }
        
        for(Id caseId : casesToShare.keySet()) {
            if((caseIdExistUserIds.containsKey(caseId) && !caseIdExistUserIds.get(caseId).contains(casesToShare.get(caseId))) || !caseIdExistUserIds.containsKey(caseId)) {
                 caseTeamMembers.add(new caseTeamMember(ParentId = caseId, MemberId = casesToShare.get(caseId), TeamRoleId = CRMManagerRole.Id));
            }
        }
        
        if(caseTeamMembers!=null && !caseTeamMembers.IsEmpty()) {
            UtilSobject.insertSobjects(caseTeamMembers);
        }
    }
  /**      
  * @Description:Share Case to RO 
  * @author :
  * @Date : 
  * @param list of caseids
  * @return NA
  * @see   UtilCaseShare(CaseHelper.shareCaseToRO())
*/           
    //share to Ro when getGateKeeper
    public static void shareCaseToRO(List<Case> ids){
        Set<String> caseIdExistUserIds = new Set<String>();
        List<CaseTeamMember> caseTeamMembers = new List<CaseTeamMember>();    
        Set<Id> shareCaseIds = new Set<Id>();

        Map<String,List<User>> regionalUsers = new Map<String,List<User>>();
        LIst<User> REGIONAL_CRM_MGR_USERS = [Select Id,UserRoleId  from User Where UserRoleId IN: REGIONAL_CRM_MGR_USERS_ROLES];
        system.debug('Userss regional' +REGIONAL_CRM_MGR_USERS);
        Map<Id, String> roleNameMap = new Map<Id, String>();
        for(UserRole role : REGIONAL_CRM_MGR_USERS_ROLES){
            roleNameMap.put(role.Id, role.Name);
        }
        system.debug('Role name map...' +roleNameMap);
       
        for(User user : REGIONAL_CRM_MGR_USERS) {
            if(roleNameMap.get(user.UserRoleId ) == UtilConstant.REGIONAL_CRM_MANAGER_E) {
                if(!regionalUsers.containsKey('EAST')) {
                    regionalUsers.put('EAST', new List<User>());
                }
                regionalUsers.get('EAST').add(user);
            }
            if(roleNameMap.get(user.UserRoleId )  == UtilConstant.REGIONAL_CRM_MANAGER_S) {
                if(!regionalUsers.containsKey('SOUTH')) {
                    regionalUsers.put('SOUTH', new List<User>());
                }
                regionalUsers.get('SOUTH').add(user);
            }
            if(roleNameMap.get(user.UserRoleId )  == UtilConstant.REGIONAL_CRM_MANAGER_W) {
                if(!regionalUsers.containsKey('WEST')) {
                    regionalUsers.put('WEST', new List<User>());
                }
                regionalUsers.get('WEST').add(user);
            }
            if(roleNameMap.get(user.UserRoleId )  == UtilConstant.REGIONAL_CRM_MANAGER_N) {
                if(!regionalUsers.containsKey('NORTH')) {
                    regionalUsers.put('NORTH', new List<User>());
                }
                regionalUsers.get('NORTH').add(user);
            }
        }
        
        Set<Id> shareCaseIdsForOnSite = new Set<Id>();
        
        for(case c : ids){
            if(c.Share_to_Regional_Office__c){
                shareCaseIds.add(c.id);
            }
            shareCaseIdsForOnSite.add(c.Id);
        }
        
         
       
        for(caseTeamMember cs : [select ParentId, MemberId from caseTeamMember where (ParentId in :shareCaseIds or ParentId in :shareCaseIdsForOnSite) and TeamRoleId = :CRMManagerRole.Id]) {
            caseIdExistUserIds.add(cs.ParentId + '__' + cs.MemberId);
        }
        
        if(caseTeamMembers!=null && !caseTeamMembers.IsEmpty()) {
            UtilSobject.insertSobjects(caseTeamMembers);
        }
    }
 /**      
  * @Description:To populate CarOwnerValues To Case.
  * @author :
  * @Date : 
  * @param Setof carOwnerIds, List cases
  * @return NA
  * @see   CaseHelper(populateCarOwnerValuesToCase())
*/      
    public static void populateCarOwnerValuesToCase(Set<String> carOwnerIds, List<Case> cases){
        
        Set<Id> accountIds = new Set<Id>();
        for(String ids : carOwnerIds){
            accountIds.add(Id.valueOf(ids));
        }
        Map<String, Account> carOwners = new Map<String, Account>([select Id, PersonBirthdate, Gender__c, Occupation__c, Phone,
                                                                    Primary_Address__c, Province__c, City__c, ZipCode__c
                                                                    from Account where Id in :accountIds]);
          
                                                                    
         system.debug('account Id for car owner...' +carOwners);
        for(Case newcase : cases){
            Account carOwner = carOwners.get(newcase.Car_Owner__c);
            if(newcase.Date_of_Birth__c == null){
                newcase.Date_of_Birth__c = carOwner.PersonBirthdate;
            }
            
            if(String.isBlank(newcase.Gender__c)){
                newcase.Gender__c = carOwner.Gender__c;
            }
            if(String.isBlank(newcase.Occupation__c)){
                newcase.Occupation__c = carOwner.Occupation__c;
            }
            if(String.isBlank(newcase.Owner_Tele__c)){
                newcase.Owner_Tele__c = carOwner.Phone;
            }
            if(String.isBlank(newcase.Address__c)){
                String state = carOwner.Province__c == null ? '' : carOwner.Province__c;
                String city = carOwner.City__c == null ? '' : carOwner.City__c;
                String street = carOwner.Primary_Address__c == null ? '' : carOwner.Primary_Address__c;
                String zip = carOwner.ZipCode__c == null ? '' : carOwner.ZipCode__c;
                newcase.Address__c = state + '\n' + city + '\n' + street + '\n' + zip;
            }
        }
    }
/**      
  * @Description:To update Vehicle Related Fields.
  * @author :
  * @Date : 
  * @param List of cases, List of vehicleIds
  * @return NA
  * @see   CaseHelper(updateVehicleRelatedFields())
*/          
    public static void updateVehicleRelatedFields(List<Case> cases, List<Id> vehicleIds)
    {
        Map<Id, Vehicle__c> vehiclesMap = New Map<Id, Vehicle__c>([select Id, EuroVIN__c, UsVIN__c, Warranty_Start_Date__c,
                                                                          EngineNumber__c, Latest_Sales_Person__c, CBU_CKD__c,
                                                                          Brand__c, Class__c, Model__c, CurrentMileage__c,
                                                                          FirstRegistrationDate__c from Vehicle__c where Id in :vehicleIds]);
        
        for(Case c : cases)
        {
            if(vehiclesMap.containsKey(c.Vehicle__c))
             {
                 if(c.EU_VIN__c == null || !String.isBlank(c.EU_VIN__c)) { 
                     c.EU_VIN__c = vehiclesMap.get(c.Vehicle__c).EuroVIN__c;   
                 }   
                 if(c.US_VIN__c == null || !String.isBlank(c.US_VIN__c)) { 
                     c.US_VIN__c = vehiclesMap.get(c.Vehicle__c).UsVIN__c;   
                 }
                 if(c.Date_of_Warranty_Expiry__c == null) { 
                     c.Date_of_Warranty_Expiry__c = vehiclesMap.get(c.Vehicle__c).Warranty_Start_Date__c;   
                 }
                 if(c.Engine_Number__c == null || !String.isBlank(c.Engine_Number__c)) { 
                     c.Engine_Number__c = vehiclesMap.get(c.Vehicle__c).EngineNumber__c;   
                 }
                 if(c.Last_Known_Sales_Person__c == null || !String.isBlank(c.Last_Known_Sales_Person__c)) { 
                     c.Last_Known_Sales_Person__c = vehiclesMap.get(c.Vehicle__c).Latest_Sales_Person__c;   
                 }
                 if(c.Car_Type__c == null || !String.isBlank(c.Car_Type__c)) {
                     c.Car_Type__c = vehiclesMap.get(c.Vehicle__c).CBU_CKD__c;
                     If(vehiclesMap.get(c.Vehicle__c).CBU_CKD__c == 'CKD') {
                         c.Car_Type__c = 'PbP';
                     }
                 }
                 if(c.Vehicle_Brand__c == null || !String.isBlank(c.Vehicle_Brand__c)) {
                     c.Vehicle_Brand__c = vehiclesMap.get(c.Vehicle__c).Brand__c;   
                 }
                 if(c.Vehicle_Class__c == null || !String.isBlank(c.Vehicle_Class__c)) { 
                     c.Vehicle_Class__c = vehiclesMap.get(c.Vehicle__c).Class__c;   
                 }
                 if(c.Vehicle_Model__c == null || !String.isBlank(c.Vehicle_Model__c)) { 
                     c.Vehicle_Model__c = vehiclesMap.get(c.Vehicle__c).Model__c;   
                 }
                 if(c.Last_Known_Mileage__c == null) { 
                     c.Last_Known_Mileage__c = vehiclesMap.get(c.Vehicle__c).CurrentMileage__c;   
                 }
                 if(c.Date_of_1st_Registration__c == null) { 
                     c.Date_of_1st_Registration__c = vehiclesMap.get(c.Vehicle__c).FirstRegistrationDate__c;   
                 }  
             }
        }
    }
    
/**      
  * @Description: Gets the existent vehicle sharing.
  * @author :Justin Yu
  * @Date : 
  * @param  vehicleToOwner is a map having case.Vehicle__c and case.OwnerId
  * @return returns the SharingIndex
  * @see   UtilCaseShare(CaseHelper.getExistentSharings())
*/          
  
    private static Set<String> getExistentSharings(Map<String, String> vehicleToOwner){
        Set<String> result = new Set<String>();
        
        for(Vehicle__Share vShare :[select ParentId, UserOrGroupId from Vehicle__Share 
                                    where ParentId in :vehicleToOwner.keySet() 
                                    and UserOrGroupId in : vehicleToOwner.values()] ){
            result.add(UtilCaseShare.getSharingIndex(vShare.ParentId, vShare.UserOrGroupId));
        }
        return result;
    }
/**      
  * @Description: add for MB Complaint Case Close.
  * @author :lishuang
  * @Date : 2013-12-04 
  * @param  list of caseids
  * @return NA
  * @see   CaseHelper(closeRelatedCase())
*/          
      
    // 2013-12-04 Created by lishuang: add for MB Complaint Case Close.
    public static void closeRelatedCase(List<Case> ids){
        Map<Id, Case> RelatedCase = new Map<Id, Case>();
        List<Case> updateCase = new List<Case>();
        
        for(Case caseNew : ids) {
            if(caseNew.ParentId == null){
            
             RelatedCase.put(caseNew.id, caseNew);
               
            }else{
               RelatedCase.put(caseNew.ParentId, caseNew);
            }
        }
        
        for(Case ca :[select Id, ParentId, status , Case_Dealer__c, Feedback_to_CAC_New__c from Case where ParentId in :RelatedCase.keySet() and status <> 'Closed' and Handling_Level__c = 'Dealer']) {
            if(ca.Case_Dealer__c == RelatedCase.get(ca.ParentId).Case_Dealer__c && ca.id != RelatedCase.get(ca.ParentId).id){
               ca.Status = closedString;
               ca.Feedback_to_CAC_New__c = RelatedCase.get(ca.ParentId).Feedback_to_CAC_New__c;
               updateCase.add(ca);
            }
        }
        if (updateCase!=null && !updateCase.IsEmpty()){
           UtilSobject.updateSobjects(updateCase);
        }
    }
 /**      
  * @Description:To get Dealer SM Manager
  * @author :
  * @Date :
  * @param map of caseCase_Dealer__c ,case.Retail_Campaign__r.Record_Type_Name__c
  * @return map of AccountId,user Id
  * @see   CaseHelper(getDealerSMManager())
*/         
    public static Map<id,id> getDealerSMManager(Map<id,String> dealerAccounts){
        Map<id,id> accountAndsmManager = new Map<id,id>(); 
        
        if (dealerAccounts.size() > 0) {
            for(User u :[select Id,AccountId, Email, ContactId, Contact.Permission_Set_Settings__c, Profile.Name from User 
                          where isActive = true and (Contact.Permission_Set_Settings__c = 'AS_Retail_Campaign' or Contact.Permission_Set_Settings__c = 'S_M_Retail_Campaign') and AccountId in :dealerAccounts.keySet()] )
                          {
                if(u.Contact.Permission_Set_Settings__c.contains('S_M_Retail_Campaign') && (dealerAccounts.get(u.AccountId) == 'S&M Event Retail Campaign' || dealerAccounts.get(u.AccountId) == 'S&M Media Retail Campaign')
                   || u.Contact.Permission_Set_Settings__c.contains('AS_Retail_Campaign') && dealerAccounts.get(u.AccountId) == 'AS Retail Campaign'){
                    if(!accountAndsmManager.containsKey(u.AccountId)) {
                        accountAndsmManager.put(u.AccountId, u.Id);
                    }
                }
            }
        }
        return accountAndsmManager;
    }
 /**      
  * @Description:Adding the logical manipulation for caseBeforeInsertUpdateTrigger
  * @author :
  * @Date :
  * @param Trigger.new, Trigger.isInsert, Trigger.isUpdate,Trigger.oldMap
  * @return NA
  * @see   CaseTriggerHandler(CaseHelper.caseBeforeInsertUpdateEvents())
*/          
    
    public static void caseBeforeInsertUpdateEvents(List<Case> cases, Boolean isInsert, Boolean isUpdate, Map<Id,Case> oldVal)
    {
            String[] eAddresses = null;
            String email = null;
            Boolean isError = false;
            Set<id> caseIds = new Set<id>();
            Map<id,String> vrsMap = new Map<id,String>();
            
            for(Case caseNew : cases) {
                if(isInsert && caseNew.RecordTypeId == RETAIL_CAMPAIGN_RECORD_TYPE && CURRENT_PROFILE.Name.startsWith(cacString)) {
                    caseIds.add(caseNew.Id);
                }
                // Check the Others email address
                if (C_MB_RECORD_TYPE == caseNew.RecordTypeId){
                    // if the email address of the manager is blank, it can't be the recipient.
                    if (caseNew.Notice_AS__c && (caseNew.Aftersales_Manager__c == null ||!String.isBlank( caseNew.Aftersales_Manager__c.trim()))) {
                        caseNew.Notice_AS__c = false;
                    }
                    if (caseNew.Notice_CRM__c && (caseNew.CRM_Manager__c == null || !String.isBlank( caseNew.CRM_Manager__c.trim()))) {
                        caseNew.Notice_CRM__c = false;
                    }
                    if (caseNew.Notice_GM__c && (caseNew.General_Manager__c == null || !String.isBlank( caseNew.General_Manager__c.trim()))) {
                        caseNew.Notice_GM__c = false;
                    }
                    if (caseNew.Notice_SM__c && (caseNew.Sales_Manager__c == null || !String.isBlank( caseNew.Sales_Manager__c.trim()))) {
                        caseNew.Notice_SM__c = false;
                    }
                        
                    if (caseNew.Others__c != null && !String.isBlank( caseNew.Others__c.trim())) {
                        isError = false;
                        email = '';
                        eAddresses = caseNew.Others__c.trim().split('\n');
                        
                        for (String e : eAddresses) {
                            if (e.trim() != '') {
                                if (pattern.matches('[_a-zA-Z\\d\\-\\./]+@[_a-zA-Z\\d\\-]+(\\.[_a-zA-Z\\d\\-]+)+',e.trim())) {
                                      email = email + e.trim() + '\n';
                                } else {
                                caseNew.addError('Other email address format is incorrect, and one can only fill in the email address.');
                                    break;
                                    
                                }
                            }
                        }
                        caseNew.Others__c = email.trim();
                    }
                }
            }
            
            if (caseIds.size()>0){
                for(Case vr : [Select Id, Retail_Campaign__r.Record_Type_Name__c, Retail_Campaign__c From Case where id in :caseIds] ){
                    if(!vrsMap.containsKey(vr.id)){
                        vrsMap.put(vr.id,vr.Retail_Campaign__r.Record_Type_Name__c);
                    }
                }
            }
        
         // [End] Added by Cyril Huang on 2014-05-06(Release1.1b)       
        
            Map<Id, List<Id>> parentIdChildIds = new Map<Id, List<Id>>();
            Set<Id> parenthasParents = new Set<Id>();
            Set<Id> parentIds = new Set<Id>();
            Set<Id> vehicleRelationships = new Set<Id>();
            Map<Id, Vehicle_Relationship__c> vehicleRelationshipInfo = new Map<Id, Vehicle_Relationship__c>();
            List<Case> changeOwnerAndSendMailObjs = new List<Case>();
            // Delete Start - Release 1.3 - Deleted by Cyril
            //List<Case> changeOwnerObjs = new List<Case>();
            //Map<id,User> changeOwnerObjsResult = new Map<id,User>();
            // Delete End - Release 1.3 - Deleted by Cyril
            Map<id,User> changeOwnerAndSendMailObjsResult = new Map<id,User>();
            Set<Id> queueIds = new Set<Id>();
            Map<String, String> subTypeMap = new Map<String, String>();
            Map<Id, String> dealerIdsforRetailInquiry = new Map<Id, String>();
            Map<Id, Id> dealerIdUserId = new Map<Id, Id>();
          //  Set<Id> retailCaseOwners = new Set<id>();
           // List<Case> retailCases = new List<Case>();
            Boolean viewCACIBSVUsers = false;
            List<User> CACIBSVUsers;
            Id accountId;
            if(UserInfo.getUserType() == 'PowerPartner' && isInsert) {
                accountId = [select id , AccountId from user where id = :userinfo.getUserId()].AccountId;
            }
        
            //get subtype chinese subject
            if(isInsert && CURRENT_PROFILE.Name.startsWith(cacString)){
                for(Case_SubType_Mapping__c csm: [select Name,Case_Subject_CN__c from Case_SubType_Mapping__c]){
                    subTypeMap.put(csm.Name, csm.Case_Subject_CN__c);
                }
            }
        
            for(Case caseNew : cases) {
            if (C_CHRYSLER_RECORD_TYPE == caseNew.RecordTypeId || C_MB_RECORD_TYPE == caseNew.RecordTypeId){
                if (isInsert) {
                    if(caseNew.ParentId != null){
                        parentIds.add(caseNew.ParentId);
                    }
                    if(accountId != null && caseNew.Case_Dealer__c == null ){
                        caseNew.Case_Dealer__c = accountId;
                        caseNew.Handling_Level__c = dealerString;
                        
                    }
                }
    
                if (caseNew.Vehicle_Relationship__c != null){
                    vehicleRelationships.add(caseNew.Vehicle_Relationship__c);
                }
    
                // Modify Start - Release 1.3 - Deleted by Cyril
                // the complaint Case Owner will be auto changed 
                // to the Dealer's Complaint Gate keeper, if the following criteria is meet:
                // -Case Record Type = MB Complaints and Dealer Contact=Yes
                // and (Case SubType !="Fire or Gasbag Case" or On-Site Manager confirmed = True)
                //if (caseHelper.C_MB_RECORD_TYPE == 
                //caseNew.RecordTypeId && 'Yes' == caseNew.Dealer_Contact__c && 
                //('Fire or Gasbag Case' != caseNew.Case_SubType__c || 
                // caseNew.On_Site_Manager_Confirmed__c ) 
                // && currentUserProfle.Name.startsWith('CAC')){
                //changeOwnerAndSendMailObjs.add(caseNew);
                //}
                //If Onsite Manager need to to assign the 
                //"Fire or Gasbag Case" Complaint to Dealer,
                //s/he will check "On-Site Manager Confirmed" field and 
                //the Complaint will be assigned to Dealer Gate Keeper following
                //if (Trigger.isUpdate && caseNew.On_Site_Manager_Confirmed__c && 
                //caseHelper.P_Central_ONSITE_CM_ID == UserInfo.getProfileId() &&
                // caseNew.OwnerId == Trigger.oldMap.get(caseNew.Id).OwnerId){
                //    changeOwnerObjs.add(caseNew);
                //}
                
                // All MB Cases that were created by CAC will be assigned to Dealer
                if (C_MB_RECORD_TYPE == caseNew.RecordTypeId && CURRENT_PROFILE.Name.startsWith(cacString)){
                    changeOwnerAndSendMailObjs.add(caseNew);
                }
                // Modify End - Release 1.3 - Deleted by Cyril
            }
            if (C_MBDA_RECORD_TYPE == caseNew.RecordTypeId ){
                if (isInsert) {
                    if(caseNew.ParentId != null){
                        parentIds.add(caseNew.ParentId);
                    }
                }
            }
            
            if(isInsert && caseNew.RecordTypeId == RETAIL_CAMPAIGN_RECORD_TYPE && CURRENT_PROFILE.Name.startsWith(cacString)) {
                dealerIdsforRetailInquiry.put(caseNew.Case_Dealer__c , vrsMap.get(caseNew.Id));
            }
            
             if(isInsert && C_MB_RECORD_TYPE == caseNew.RecordTypeId && (caseNew.Case_SubType__c == 'RSA - Waiting Time of Assistance' 
                || caseNew.Case_SubType__c == 'RSA-RSA service attitude' || caseNew.Case_SubType__c == 'RSA - Professionalism of Rescue Worker' || caseNew.Case_Type__c == 'Finance service') 
                && !(CURRENT_PROFILE.Name.startsWith(dealerString))) {
                viewCACIBSVUsers = true;   
            }
            
            // Added by Cyril Start -- Release1.3 Complaint Solution Team CR
            if (isInsert && CURRENT_PROFILE.Name.startsWith(cacString)) {
                caseNew.CreateByCAC__c = true;
            }
            // Added by Cyril End -- Release1.3 Complaint Solution Team CR
        }
        
        
            if(dealerIdsforRetailInquiry.size() > 0) {
                dealerIdUserId = CaseHelper.getDealerSMManager(dealerIdsforRetailInquiry);
            }
            
            if (parentIds.size()>0){
                for(Case ca :[select Id, ParentId from Case where ParentId in :parentIds] ) {
                    if(!parentIdChildIds.containsKey(ca.ParentId)) {
                        parentIdChildIds.put(ca.ParentId, new List<Id>());
                    }
                    parentIdChildIds.get(ca.ParentId).add(ca.Id);
                }

                for(Case ca :[select Id, ParentId from Case where Id in :parentIds] ) {
                    if(ca.ParentId != null) {
                        parenthasParents.add(ca.Id);
                    }
                }
            }

            
        //get vehicle infomation
        if (vehicleRelationships.size()>0){
            for(Vehicle_Relationship__c vr : [select Vehicle_Brand__c, Vehicle_Class__c , Vehicle_Model__c, Vehicle_ID__c, Vehicle_ID__r.UsVIN__c, Vehicle_ID__r.EuroVIN__c, Vehicle_ID__r.Latest_Sales_Person__c, Vehicle_ID__r.Warranty_Start_Date__c, Vehicle_ID__r.FirstRegistrationDate__c, Registration_Number__c from Vehicle_Relationship__c where Id in :vehicleRelationships] ){
                vehicleRelationshipInfo.put(vr.id,vr);
            }
        }
        // Delete Start - Release 1.3 - Deleted by Cyril
        //get Gate Keeper Owner
        //if(changeOwnerObjs.size()>0){
        //    changeOwnerObjsResult = CaseHelper.getGateKeepers(changeOwnerObjs);
        //}
        // Delete End - Release 1.3 - Deleted by Cyril
    
        //get Gate Keeper Owner US-CC-008
        if(changeOwnerAndSendMailObjs.size()>0){
            changeOwnerAndSendMailObjsResult = UtilCaseShare.getGateKeepers(changeOwnerAndSendMailObjs);
        }
    
        for(QueueSobject qs : CENTRAL_REGIONAL_CASE_QUEUES) {
            queueIds.add(qs.QueueId);
        }
        
        if(viewCACIBSVUsers) {
            CACIBSVUsers = [select id from User where profile.name =: UtilConstant.CAC_IB_TL and isActive = true];
        }
        
        
        for(Case caseNew : cases) {
        if (C_MBDA_RECORD_TYPE == caseNew.RecordTypeId){
            if(isInsert) {
                caseNew.Repeat_Complaint_Times__c = 1;
                //set repeat complaint times
                if (caseNew.ParentId != null){
                    if(parenthasParents.contains(caseNew.ParentId)) {
                            caseNew.addError(caseHelper.NOT_PRIMARY_REMINDER );
                        }
                        else
                        {
                            if(parentIdChildIds.containsKey(caseNew.ParentId)) {
                                caseNew.Repeat_Complaint_Times__c = parentIdChildIds.get(caseNew.ParentId).size() + 2;
                            }
                            else {
                                caseNew.Repeat_Complaint_Times__c = 2;
                            }
                    }
                }
            }
        }
        if (C_CHRYSLER_RECORD_TYPE == caseNew.RecordTypeId || C_MB_RECORD_TYPE == caseNew.RecordTypeId){
            if(isInsert) {
                //set "Case Subtype" to field "Subject"
                if(CURRENT_PROFILE.Name.startsWith(cacString)){
                    caseNew.Subject = subTypeMap.get(caseNew.Case_SubType__c);
                }

                caseNew.Repeat_Complaint_Times__c = 1;

                //set repeat complaint times
                if (caseNew.ParentId != null){
                    if(parenthasParents.contains(caseNew.ParentId)) {
                        caseNew.addError(NOT_PRIMARY_REMINDER );
                    }
                    else
                    {
                        if(parentIdChildIds.containsKey(caseNew.ParentId)) {
                            caseNew.Repeat_Complaint_Times__c = parentIdChildIds.get(caseNew.ParentId).size() + 2;
                        }
                        else {
                            caseNew.Repeat_Complaint_Times__c = 2;
                        }
                        caseNew.Feedback_to_CAC_New__c = '';
                        caseNew.Feedback_Read__c = false;
                        caseNew.Results_Response__c = '';
                        caseNew.Result__c = '';
                        caseNew.Final__c = false;
                        caseNew.On_Site_Manager_Confirmed__c = false;
                    }
                }
            }
            // ADD START AS-Complaint_002 CHAOS 2014/2/28
            Set<id> dealerAccounts = new Set<id>();
            
            Id oldSupportDealer1 = 
                (oldVal == null ) ? null : oldVal.get(caseNew.Id).Support_Dealer_1__c;
            Id oldSupportDealer2 = 
                (oldVal == null ) ? null : oldVal.get(caseNew.Id).Support_Dealer_2__c;
            Id oldSupportDealer3 = 
                (oldVal == null ) ? null : oldVal.get(caseNew.Id).Support_Dealer_3__c;
            
            if (caseNew.Support_Dealer_1__c != oldSupportDealer1 
                && caseNew.Support_Dealer_1__c != null ){
                dealerAccounts.add(caseNew.Support_Dealer_1__c);
            }
            if (caseNew.Support_Dealer_2__c != oldSupportDealer2 
                && caseNew.Support_Dealer_2__c != null ){
                dealerAccounts.add(caseNew.Support_Dealer_2__c);
            }
            if (caseNew.Support_Dealer_3__c != oldSupportDealer3
                && caseNew.Support_Dealer_3__c != null ){
                dealerAccounts.add(caseNew.Support_Dealer_3__c);
            }
           Map<id,String> accountAndKeeperEmail = getComplaintGateKeeperEmail(dealerAccounts);
            
            if (caseNew.Support_Dealer_1__c != oldSupportDealer1
                && caseNew.Support_Dealer_1__c != null 
                && caseNew.Send_Email_Support_Dealer1_Keeper_Email__c 
                            != accountAndKeeperEmail.get(caseNew.Support_Dealer_1__c)){
                caseNew.Send_Email_Support_Dealer1_Keeper__c = true;
                caseNew.Send_Email_Support_Dealer1_Keeper_Email__c =
                        accountAndKeeperEmail.get(caseNew.Support_Dealer_1__c);
            } else {
                caseNew.Send_Email_Support_Dealer1_Keeper_Email__c = '';
            }

            if (caseNew.Support_Dealer_2__c != oldSupportDealer2
                && caseNew.Support_Dealer_2__c != null
                && caseNew.Send_Email_Support_Dealer2_Keeper_Email__c 
                            != accountAndKeeperEmail.get(caseNew.Support_Dealer_2__c)){
                caseNew.Send_Email_Support_Dealer2_Keeper__c = true;
                caseNew.Send_Email_Support_Dealer2_Keeper_Email__c =
                        accountAndKeeperEmail.get(caseNew.Support_Dealer_2__c);
            } else {
                caseNew.Send_Email_Support_Dealer2_Keeper_Email__c = '';
            }
            
            if (caseNew.Support_Dealer_3__c != oldSupportDealer3
                && caseNew.Support_Dealer_3__c != null
                && caseNew.Send_Email_Support_Dealer3_Keeper_Email__c 
                            != accountAndKeeperEmail.get(caseNew.Support_Dealer_3__c)){
                caseNew.Send_Email_Support_Dealer3_Keeper__c = true;
                caseNew.Send_Email_Support_Dealer3_Keeper_Email__c =
                        accountAndKeeperEmail.get(caseNew.Support_Dealer_3__c);
            } else {
                caseNew.Send_Email_Support_Dealer3_Keeper_Email__c = '';
            }
            // ADD END AS-Complaint_002 CHAOS 2014/2/28
            
            //set Vehicle infomation
            if (caseNew.Vehicle_Relationship__c != null && vehicleRelationshipInfo.get(caseNew.Vehicle_Relationship__c) != null){
                caseNew = caseHelper.setVehicleInfo(caseNew,vehicleRelationshipInfo.get(caseNew.Vehicle_Relationship__c));
            }

            // Delete Start - Release 1.3 - Deleted by Cyril
            //if(changeOwnerObjsResult.containsKey(caseNew.id)
            // && !queueIds.contains(caseNew.OwnerId)) {
            // caseNew.OwnerId = changeOwnerObjsResult.get(caseNew.id).id;
            // caseNew.Handling_Level__c = 'Dealer';
            //}
            // Delete End - Release 1.3 - Deleted by Cyril

            if(changeOwnerAndSendMailObjsResult.containsKey(caseNew.id) && !queueIds.contains(caseNew.OwnerId)) {
                caseNew.OwnerId = changeOwnerAndSendMailObjsResult.get(caseNew.id).id;
                caseNew.Handling_Level__c = dealerString;
                caseNew.SendEmailToGateKeeper__c = true;
            }

            //when owner changed, save previous owner in field
            if (C_MB_RECORD_TYPE == caseNew.RecordTypeId && isUpdate) {
                Id previousId = oldVal.get(caseNew.Id).OwnerId;
                if (caseNew.OwnerId != previousId && String.valueOf(previousId).substring(0,3).equals('005')) {
                    caseNew.Previous_Owner__c = previousId;
                }
            }
        }

        //If Feedback to CAC changed from null to any values, change Has Feedback to true.
        if(isUpdate) {
            if(caseNew.Feedback_to_CAC_New__c != null && caseNew.Feedback_to_CAC_New__c != '' && (oldVal.get(caseNew.Id).Feedback_to_CAC_New__c == null || oldVal.get(caseNew.Id).Feedback_to_CAC_New__c == '')) {
                caseNew.Has_Feedback__c = true;
            }

            //Update 15 Minutes Before Deadline when Deadline is inserted or updated.
            if(caseNew.Deadline__c != null && caseNew.Deadline__c != oldVal.get(caseNew.Id).Deadline__c) {
                caseNew.X15_Minutes_Before_Deadline__c = caseNew.Deadline__c.addMinutes(-15);
            }
        }

        if(isInsert && caseNew.Deadline__c != null) {
            caseNew.X15_Minutes_Before_Deadline__c = caseNew.Deadline__c.addMinutes(-15);
        }
        
        if(isInsert && caseNew.RecordTypeId == RETAIL_CAMPAIGN_RECORD_TYPE && CURRENT_PROFILE.Name.startsWith(cacString) && dealerIdUserId.containsKey(caseNew.Case_Dealer__c)) {
            caseNew.OwnerId = dealerIdUserId.get(caseNew.Case_Dealer__c);
            caseNew.Retail_Case_Notice_Dealer_Flag__c = true;
        }
        
        if(isInsert && C_MB_RECORD_TYPE == caseNew.RecordTypeId && (caseNew.Case_SubType__c == 'RSA - Waiting Time of Assistance' 
            || caseNew.Case_SubType__c == 'RSA-RSA service attitude' || caseNew.Case_SubType__c == 'RSA - Professionalism of Rescue Worker' || caseNew.Case_Type__c == 'Finance service') 
            && !(CURRENT_PROFILE.Name.startsWith(dealerString)) && CACIBSVUsers.size() > 0) {
            caseNew.ownerId = CACIBSVUsers[0].id;
        }
    }
        
        Set<String> carOwnerIds = new Set<String>();
        List<Case> casesList = new List<Case>();
    
        List<Case> casesForVehicle = new List<Case>();
        List<Id> vehicleIds = new List<Id>();
    
        for(Case newCase : cases){
            if(newCase.Car_Owner__c != null && (isInsert || (isUpdate && newCase.Car_Owner__c != oldVal.get(newCase.Id).Car_Owner__c))){
                carOwnerIds.add(newCase.Car_Owner__c);
                casesList.add(newCase);
            }
    
            if(newCase.Vehicle__c != null && (isInsert || (isUpdate && newCase.Vehicle__c != oldVal.get(newCase.Id).Vehicle__c)))
            {
                casesForVehicle.add(newCase);
                vehicleIds.add(newCase.Vehicle__c);
            }
        }

        if(carOwnerIds.size() > 0) {
           populateCarOwnerValuesToCase(carOwnerIds, casesList);
        }
        if(casesForVehicle.size() > 0) {
            updateVehicleRelatedFields(casesForVehicle, vehicleIds);
        }
        
            // [Start] Added by Cyril Huang on 2014-05-06(Release1.1b)
            // Send case updating notification email to Dealer Managers
            // 2013-09-06 Created by Justin: Populate the car owner values to case.
            boolean isStatus = false;
            boolean isInfo = false;
            boolean isSettlement = false;
            boolean isDescChanged = false;
            String eAddress = '';
            String content = '';
            String accName = '';
            String statusTrack = '';
            String handleTrack = '';
            List<Messaging.SingleEmailMessage> messages = new List<Messaging.SingleEmailMessage>();
            // Add Start - Release 1.3 - Added by Cyril
            List<Task> taskListOf48H = new List<Task>();
            List<Task> taskListOf72H = new List<Task>();
            // Add End - Release 1.3 - Added by Cyril
        
            if (isUpdate) {
            for(Case caseNew : cases) {
                Case caseOld = oldVal.get(caseNew.id);
                Messaging.SingleEmailMessage message = new Messaging.SingleEmailMessage();
                isStatus = false;
                isInfo = false;
                isSettlement = false;
                eAddress = '';
                content = '';
                statusTrack = '';
                handleTrack = '';
                
                // Add Start - Release 1.3 - Added by Cyril
                if (caseNew.CheckFlag_48H__c && !caseOld.CheckFlag_48H__c && caseNew.Customer_Care_Owner__c != null) {
                        taskListOf48H.add(new Task(
                        Subject= 'Case' + caseNew.CaseNumber + (caseNew.Dealer_Contact__c == yesString ? 'After 48 hours, please check whether the dealer is given FP' : 'After 48 hours, please check whether the Distributor/area/Center gives FP'),
                        RecordTypeId = Schema.SObjectType.task.getRecordTypeInfosByName().get('General Task').getRecordTypeId(),
                        OwnerId = caseNew.Customer_Care_Owner__c,
                        Status = 'Open',
                        WhoId = caseNew.Account.id,
                        WhatId = caseNew.id,
                        ActivityDate = date.today(),
                        ReminderDateTime = DateTime.now(),
                        IsReminderSet = true
                        ));
                }
                if (caseNew.CheckFlag_72H__c && !caseOld.CheckFlag_72H__c && caseNew.Customer_Care_Owner__c != null) {
                    taskListOf72H.add(new Task(
                        Subject= 'Case' + caseNew.CaseNumber + (caseNew.Dealer_Contact__c == yesString ? 'After 72 hours, please check whether the dealer gives FP' : 'After 72 hours, please check whether the Distributor/area/Center FP is given, and in reply to end customers within 24 hours'),
                        RecordTypeId = Schema.SObjectType.task.getRecordTypeInfosByName().get('General Task').getRecordTypeId(),
                        OwnerId = caseNew.Customer_Care_Owner__c,
                        Status = 'Open',
                        WhoId = caseNew.Account.id,
                        WhatId = caseNew.id,
                        ActivityDate = date.today(),
                        ReminderDateTime = DateTime.now(),
                        IsReminderSet = true
                        ));
                }
                if (caseNew.CheckFlag_48H__c) caseNew.CheckFlag_48H__c = false;
                if (caseNew.CheckFlag_72H__c) caseNew.CheckFlag_72H__c = false;
                // Add End - Release 1.3 - Added by Cyril
                
                if (caseNew.Status != caseOld.Status) {
                    isStatus = true;
                    statusTrack = 'Updated From ' + caseOld.Status + ' To ' + caseNew.Status;
                }
                if (caseNew.Handling_Level__c != caseOld.Handling_Level__c) {
                    isInfo = true;
                    handleTrack = 'Updated From ' + caseOld.Handling_Level__c + ' To ' + caseNew.Handling_Level__c;
                }
                if (caseNew.Description_Changed__c) {
                    isInfo = true;
                    isDescChanged = true;
                    caseNew.Description_Changed__c = false;
                }
                if (caseNew.Settlement_Changed__c) {
                    isSettlement = true;
                }
                
                if (isStatus == false && isInfo == false && isSettlement == false) {
                    continue;
                }
                
                if (caseNew.Notice_AS__c) {
                    eAddress = eAddress + caseNew.Aftersales_Manager__c + '\n';
                }
                if (caseNew.Notice_CRM__c) {
                    eAddress = eAddress + caseNew.CRM_Manager__c + '\n';
                }
                if (caseNew.Notice_GM__c) {
                    eAddress = eAddress + caseNew.General_Manager__c + '\n';
                }
                if (caseNew.Notice_SM__c) {
                    eAddress = eAddress + caseNew.Sales_Manager__c + '\n';
                }
                if (caseNew.Notice_Others__c) {
                    eAddress = eAddress + caseNew.Others__c;
                } else if (eAddress != '') {
                    eAddress = eAddress.substring(0, eAddress.lastIndexOf('\n'));
                }
                
                if (eAddress != '') {
                    content = 'Dear Dealer Managers, \n\n' + 'Case ' + caseNew.CaseNumber + ' has been updated in the';
                    if (isStatus) {
                        content = content + ' Status';
                    }
                    if (isInfo) {
                        content = content + ' ComplaintInfo';
                    }
                    if (isSettlement) {
                        content = content + ' Settlement';
                    }
                    if (caseNew.AccountId == null) {
                        accName = null;
                    } else {
                        accName = [select name from Account where id = :caseNew.AccountId].name;
                    }
                    content = content + ' Section by ' + UserInfo.getName() + '.\n\n';
                    content = content + 'The main information of the updated case:\n' 
                                      + ' - Subject = ' + caseNew.Subject + '\n'
                                      + ' - Complaint Status = ' + caseNew.Status + '\n'
                                      + ' - Complaint Date = ' + caseNew.Complaint_Date__c + '\n'
                                      + ' - Case Source = ' + caseNew.Case_Source__c + '\n'
                                      + ' - Account Name = ' + accName + '\n'
                                      + ' - Vehicle Series = ' + caseNew.Vehicle_Class__c + '\n'
                                      + ' - Vehicle Model = ' + caseNew.Car_Model__c + '\n'
                                      + ' - Description = ' + caseNew.Description + '\n'
                                      + ' - Description1 = ' + caseNew.DescriptionOne__c + '\n';
                    if (statusTrack != '') {
                        content = content + ' - Status Tracking = ' + statusTrack + '\n';
                    }
                    if (handleTrack != '') {
                        content = content + ' - Handling Level Tracking = ' + handleTrack + '\n';
                    }
                    content = content + '\n';
                    if (caseNew.Settlement_Changed__c) {
                        caseNew.Settlement_Changed__c = false;
                        content = content + 'Settlement Section:\n';
                        
                    
                        
                        for (Settlement_Management__c sm : [select Name, Settlement_Type__c, Customer_Settlement_Amount__c, Dealer_Settlement_Amount__c, MB_Settlement_Amount__c, Total_Settlement_Amount__c, Other_Settlement_Type__c, LastModifiedDate from Settlement_Management__c where Case__c = :caseNew.Id order by LastModifiedDate Desc]) {
                            content = content + 'Settlement Management ' + sm.Name + ', '
                                              + 'LastModifiedDate = ' + sm.LastModifiedDate.format('yyyy/MM/dd HH:mm:ss') + '\n'
                                              + ' - Settlement Type = ' + sm.Settlement_Type__c + '\n'
                                              + ' - Customer Settlement Amount = ' + sm.Customer_Settlement_Amount__c + '\n'
                                              + ' - Dealer Settlement Amount = ' + sm.Dealer_Settlement_Amount__c + '\n'
                                              + ' - MB Settlement Amount = ' + sm.MB_Settlement_Amount__c + '\n'
                                              + ' - Total Settlement Amount = ' + sm.Total_Settlement_Amount__c + '\n'
                                              + ' - Other Settlement Type = ' + sm.Other_Settlement_Type__c + '\n\n';
                        }
                    }
                    if (isDescChanged) {
                        content = content + 'ComplaintInfo Section:\n';
                        
                        
                        
                        for (Complaint_Description__c cd :[select Name, Description__c, LastModifiedDate from Complaint_Description__c where Case__c =: caseNew.Id order by LastModifiedDate Desc] ) {
                            content = content + 'Complaint Description / Resolution ' + cd.Name + ', '
                                              + 'LastModifiedDate = ' + cd.LastModifiedDate.format('yyyy/MM/dd HH:mm:ss') + '\n'
                                              + ' - ' + cd.Description__c + '\n\n';
                        }
                    }
                    content = content + 'Best Regards,\n\n' + UserInfo.getName() + '.';
                    
                    message.setToAddresses(eAddress.split('\n'));
                    message.setSubject('Case ' + caseNew.CaseNumber + ' has been updated');
                    message.setSaveAsActivity(false);
                    message.setPlainTextBody(content);
                    messages.add(message);
                }
            }
            
            // Add Start - Release 1.3 - Added by Cyril
            if (taskListOf48H.size() > 0) {
                insert taskListOf48H;
            }
            if (taskListOf72H.size() > 0) {
                insert taskListOf72H;
            }
            // Add End - Release 1.3 - Added by Cyril
                
            if (messages.size() > 0) {
                Messaging.Email[] emails = new Messaging.Email[messages.size()];
                for(Integer i = 0; i < messages.size(); i++) {
                    emails[i] = messages.get(i);
                }
                
                try {
                    Messaging.sendEmail(emails);
                } catch(Exception ex) {
                    system.debug('Exception occured when sending Case Updating Notification eamils to Dealer Managers :' + ex.getMessage());
                }
            }
        }
       
    }
/**      
  * @Description: Case After Insert OR Update Trigger merge 
  * @author :CHAOS
  * @Date :2014/2/21
  * @param case.Support_Dealer_1__c,oldSupportDealer1,case.Id, isInsert, isUpdate
  * @return NA
  * @see CaseHelper(supportDealerMethod())
*/              
      
    private static void supportDealerMethod(Id newDealerId, Id oldDealerId, Id caseId, Boolean isInsert, Boolean isUpdate) {
        Map<id,Set<Id>> casesToDeleteFromShare = new Map<Id, Set<Id>>();
        Map<id,Set<Id>> casesToShareForSupport = new Map<Id, Set<Id>>();
        if(isInsert){
            if (newDealerId != null && !casesToShareForSupport.get(caseId).contains(newDealerId)){
                casesToShareForSupport.get(caseId).add(newDealerId);
            }
        }
        if(isUpdate && (newDealerId != oldDealerId)) {
            if( oldDealerId == null  && !casesToShareForSupport.get(caseId).contains(newDealerId)) {
                
                casesToShareForSupport.get(caseId).add(newDealerId);
                
            } else {
                if( newDealerId != null  && !casesToShareForSupport.get(caseId).contains(newDealerId)) {
                    casesToShareForSupport.get(caseId).add(newDealerId);
                }
                if (!casesToDeleteFromShare.get(caseId).contains(oldDealerId)) {
                    casesToDeleteFromShare.get(caseId).add(oldDealerId);
                }
            }
        }
    }
    /**      
  * @Description: To handle Case After Insert Or Update Events 
  * @author :CHAOS
  * @Date :2014/2/21
  * @param Trigger.new, Trigger.isInsert, Trigger.isUpdate,Trigger.oldMap,Trigger.newMap
  * @return NA
  * @see CaseTriggerHandler(CaseHelper.handleCaseAfterInsertOrUpdateEvents())
*/          
    
    public static void handleCaseAfterInsertOrUpdateEvents(List<Case> cases, Boolean isInsert, Boolean isUpdate, Map<Id,Case> oldVal, Map<Id, Case> newVal)
    {
    
        List<Sobject> insertCaseHistorys = new List<Sobject>();
        List<Sobject> insertCaseDescriptions = new List<Sobject>();
       // List<Sobject> updateObjs = new List<Sobject>();
        Map<id,String> vehicleRelationshipMap = new Map<id,String>();
        Map<id,String> userMap = new Map<id,String>();
        Map<id,id> casesToShare = new Map<id, id>();
        // ADD START AS-Complaint_002 CHAOS 2014/2/21
        Map<id,Set<Id>> casesToDeleteFromShare = new Map<Id, Set<Id>>();
        Map<id,Set<Id>> casesToShareForSupport = new Map<Id, Set<Id>>();
        // ADD END AS-Complaint_002 CHAOS 2014/2/21
        Map<String, String> vehicleToOwner = new Map<String, String>();
        Map<id,id> casesToShareRO = new Map<id, id>();
        Set<id> vehicleRelationship_Ids = new Set<id>();
        Set<id> userIds = new Set<id>();
        Set<id> smsIds = new Set<id>();
        Set<id> account_Ids = new Set<id>();
        List<String> targetList = null;    
        List<Case> casesForDescription = new List<Case>();
        List<Id> CentralQueue_ID = new List<Id>();
        List<Case> closeRelatedCase = new List<Case>();
        list<Vehicle_Relationship__c> vehRelationship;
        
        if(isUpdate) {
            for(QueueSobject q : CENTRAL_CASE_QUEUES) {
                CentralQueue_ID.add(q.QueueId);
            }
        }
        
        for(Case caseNew : cases) {
            if (isUpdate){
                Case caseOld = oldVal.get(caseNew.Id);
                if (C_MB_RECORD_TYPE == caseNew.RecordTypeId){
                    targetList = COLS_MB_TRACKING;
                }
                if (C_CHRYSLER_RECORD_TYPE == caseNew.RecordTypeId ){
                    targetList = COLS_CHRYSLER_TRACKING;
                }
                //(US-CC-002,US-CC-003,US-CC-015)
                if ( targetList != null){
                    for(String cloName: targetList){
                        String newValue = String.valueOf(caseNew.get(cloName));
                        String oldValue = String.valueOf(caseOld.get(cloName));
                        String labelName = FLDOBJ_MAP.get(cloName).getDescribe().getLabel();
                        String seToGKBef = String.valueOf(caseNew.get(sendEmailToGateKeeperString));
                        String seToGKAft = String.valueOf(caseOld.get(sendEmailToGateKeeperString));
                        if(seToGKBef != seToGKAft) {
                            continue;
                        }
                        if (cloName == 'Escalate_Date_to_RO__c' || cloName == 'Escalate_Date_to_CO__c') {
                            if (newValue != null) {
                                Integer findex = newValue.indexOf(' ');
                                if (findex > 0) {
                                    newValue = newValue.subString(0, findex);
                                }
                            }
                            if (oldValue != null) {
                                Integer findex = oldValue.indexOf(' ');
                                if (findex > 0) {
                                    oldValue = oldValue.subString(0, findex);
                                }
                            }
                        }
                        //tracking history
                        if(newValue != oldValue){
                            if (cloName == vehicleRelationship){
                                vehicleRelationship_Ids.add(caseNew.Vehicle_Relationship__c);
                                vehicleRelationship_Ids.add(caseOld.Vehicle_Relationship__c);
                            }else if(cloName == 'OwnerId'){
                                userIds.add(caseNew.OwnerId);
                                userIds.add(caseOld.OwnerId);
                            }else{
                                insertCaseHistorys.add(CaseHelper.newCaseHistory(caseNew.Id, labelName , newValue, oldValue));
                                if(cloName == 'Case_Department__c') {
                                    insertCaseDescriptions.add(CaseHelper.newCaseDescription(caseNew.Id, labelName , newValue, oldValue));
                                }
                            }
                        }
                    }
                }
            }
    
            //US-CC-023
            if (C_INQUIRY_RECORD_TYPE == caseNew.RecordTypeId) {
                if (isUpdate && caseNew.Case_Dealer__c != null && caseNew.TL_Reviewed__c && !oldVal.get(caseNew.Id).TL_Reviewed__c) {
                    casesToShare.put(caseNew.Id, caseNew.Case_Dealer__c);
                }
            }
            if (C_CHRYSLER_RECORD_TYPE == caseNew.RecordTypeId ||C_MB_RECORD_TYPE == caseNew.RecordTypeId) {
                // 2014-08-15 Created by lishuang: add for MB Complaint Case Close.
                if (isUpdate && C_MB_RECORD_TYPE == caseNew.RecordTypeId && caseNew.Close_Relevant_Repeat_Complaint__c == true && caseNew.Case_Dealer__c != null && caseNew.Status == 'Closed' && oldVal.get(caseNew.Id).Status != 'Closed') {
                    closeRelatedCase.add(caseNew);
                }
                if (caseNew.Case_Dealer__c != null && yesString == caseNew.Dealer_Contact__c){
                    if(isInsert){
                        casesToShare.put(caseNew.Id, caseNew.Case_Dealer__c);
                    }
                    if(isUpdate && yesString != oldVal.get(caseNew.Id).Dealer_Contact__c){
                        casesToShare.put(caseNew.Id, caseNew.Case_Dealer__c);
                    }
                    if(isUpdate && caseNew.OwnerId != oldVal.get(caseNew.Id).OwnerId) {
                        casesToShare.put(caseNew.Id, caseNew.Case_Dealer__c);
                        boolean flag = false;
                        for(integer i = 0;i<CentralQueue_ID.size();i++) {
                            if(CentralQueue_ID[i] == caseNew.OwnerId) {
                                flag = true;
                            }
                        }
                        if(isUpdate && flag && caseNew.Previous_Owner__c != null) {
                            casesToShareRO.put(caseNew.Id, caseNew.Previous_Owner__c);
                        }
                    }
                    
                    // By Justin - maps the vehicle and owner
                    //  in case, to share the vehicle to case owner.
                    String caseOwnerId = caseNew.OwnerId;
                    if(caseNew.Vehicle__c != null && caseNew.ParentId == null && caseOwnerId.startsWith('005') && !(isUpdate && caseNew.OwnerId == oldVal.get(caseNew.Id).OwnerId)){
                        vehicleToOwner.put(caseNew.Vehicle__c, caseNew.OwnerId);
                    }
                } 
                // ADD START AS-Complaint_002 CHAOS 2014/2/21
                Id oldSupportDealer1 = 
                    (oldVal == null )? null : oldVal.get(caseNew.Id).Support_Dealer_1__c;
                Id oldSupportDealer2 = 
                    (oldVal == null )? null : oldVal.get(caseNew.Id).Support_Dealer_2__c;
                Id oldSupportDealer3 = 
                    (oldVal == null )? null : oldVal.get(caseNew.Id).Support_Dealer_3__c;
    
                if(!casesToShareForSupport.containsKey(caseNew.Id)) {
                    casesToShareForSupport.put(caseNew.Id, new Set<Id>());
                }
                if(!casesToDeleteFromShare.containsKey(caseNew.Id)) {
                    casesToDeleteFromShare.put(caseNew.Id, new Set<Id>());
                }
                
                supportDealerMethod(caseNew.Support_Dealer_1__c,oldSupportDealer1,caseNew.Id, isInsert, isUpdate);
                supportDealerMethod(caseNew.Support_Dealer_2__c,oldSupportDealer2,caseNew.Id, isInsert, isUpdate);
                supportDealerMethod(caseNew.Support_Dealer_3__c,oldSupportDealer3,caseNew.Id, isInsert, isUpdate);
                
                //ADD END AS-Complaint_002 CHAOS 2014/2/21
            }
            if (isInsert){
                if (caseNew.ParentId == null && caseNew.AccountId != null && caseNew.Handling_Level__c != dealerString && (C_CHRYSLER_RECORD_TYPE == caseNew.RecordTypeId ||C_MB_RECORD_TYPE == caseNew.RecordTypeId)){
                    smsIds.add(caseNew.Id);
                    account_Ids.add(caseNew.AccountId);
                }
                
                //US-CC-024
                if(C_MB_RECORD_TYPE == caseNew.RecordTypeId && !String.isBlank(caseNew.Description)) {
                    casesForDescription.add(caseNew);
                }
            }
        }
        
        if (closeRelatedCase.size() > 0){
            closeRelatedCase(closeRelatedCase);
        }
        
        vehRelationship=new list<Vehicle_Relationship__c>([select id , name from Vehicle_Relationship__c where id in :vehicleRelationship_Ids]);
    
        if (vehicleRelationship_Ids.size()>0 || userIds.size()>0){
            for(Vehicle_Relationship__c vr :vehRelationship ){
                if(!vehicleRelationshipMap.containsKey(vr.id)){
                    vehicleRelationshipMap.put(vr.id,vr.name);
                }
            }

            for(user u:[select id , name from user where Id in :userIds]){
                if(!userMap.containsKey(u.id)){
                    userMap.put(u.id,u.name);
                }        
            }
            
            for(QueueSobject u:[select QueueId , queue.name from QueueSobject where QueueId in :userIds limit 100]){
                if(!userMap.containsKey(u.QueueId)){
                    userMap.put(u.QueueId,u.queue.name);
                }        
            }
        
            for(Case caseNew : cases) {
                Case caseOld = oldVal.get(caseNew.Id);
                String seToGKBef = String.valueOf(caseNew.get(sendEmailToGateKeeperString));
                String seToGKAft = String.valueOf(caseOld.get(sendEmailToGateKeeperString));
                if(seToGKBef != seToGKAft) {
                    continue;
                }
    
                Id newId = caseNew.Vehicle_Relationship__c;
                Id oldId = caseOld.Vehicle_Relationship__c;
                String labelName = FLDOBJ_MAP.get(vehicleRelationship).getDescribe().getLabel();
                //tracking history
                if(newId != oldId){
                    insertCaseHistorys.add(newCaseHistory(caseNew.Id, labelName , vehicleRelationshipMap.get(newId), vehicleRelationshipMap.get(oldId)));
                }
    
                newId = caseNew.OwnerId;
                oldId = caseOld.OwnerId;
                labelName= 'Case Owner';
                //tracking history
                if(newId != oldId){
                    insertCaseHistorys.add(newCaseHistory(caseNew.Id, labelName , userMap.get(newId), userMap.get(oldId)));
                }            
            }
        }
    
        //create SMS tasks
        if(smsIds.size() > 0) {
            createSmsTasks(smsIds, account_Ids);
        }
        
        // ADD START AS-Complaint_002 CHAOS 2014/2/21
        if(casesToDeleteFromShare.keySet().size() > 0) {
            deleteShareFromCase(casesToDeleteFromShare);
        }
        
        if(casesToShareForSupport.keySet().size() > 0) {
            UtilCaseShare.shareCaseWithoutshareVehicle(casesToShareForSupport);
        }
        // ADD END AS-Complaint_002 CHAOS 2014/2/21
        
        if(casesToShare.keySet().size() > 0) {
           UtilCaseShare.shareCase(casesToShare, vehicleToOwner);
        }
    
        if(casesToShareRO.keySet().size() > 0) {
            shareCaseToRO(casesToShareRO);
        } 
        
        if (insertCaseHistorys!=null && !insertCaseHistorys.IsEmpty()){
            UtilSobject.insertSobjects(insertCaseHistorys);
        }
        
        if (insertCaseDescriptions!=null && !insertCaseDescriptions.IsEmpty()){
            UtilSobject.insertSobjects(insertCaseDescriptions);
        }
        
        //Creat the case description record
        if(casesForDescription.size() > 0) {
            creatCaseDescription(casesForDescription);
        }
        
       
        /**
         * 2014-03-24 updated by Justin Yu -- Added 
         * the child case description to the Parent MB Complaint case
         */
        if(isInsert){
            Set<String> caseIds = new Set<String>();
            for(Case c : cases){
                if(c.RecordTypeId == Schema.SObjectType.Case.getRecordTypeInfosByName().get(UtilConstant.MB_COMPLAINT).getRecordTypeId() && c.ParentId != null){
                    caseIds.add(c.Id);
                }
            }
            
            List<Case> parentCases = new List<Case>();
            
            if(caseIds.size() > 0){
                for(Case item :[select Description, DescriptionOne__c, Parent.Description, Parent.DescriptionOne__c from Case where Id in :caseIds] ){
                    item.Parent.Description = item.Description;
                    item.Parent.DescriptionOne__c = item.DescriptionOne__c;
                    parentCases.add(item.Parent);
                }
            }
            update parentCases;
        }
        //---------------------Bing add for data sharing-----------------
        AccountSharingDataHandler handler = new AccountSharingDataHandler('Complaint');
        handler.shareAccountByComplaint(newVal, oldVal, isInsert);
        //---------------------Bing add for data sharing-----------------
        
    }
}