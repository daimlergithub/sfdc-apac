/*  Class: TriggerOpportunityTriggerHandlerIN
    Created By: Shashi Goswami
    Date: 2018/03/28
*/
public class TriggerOpportunityTriggerHandlerIN implements TriggerHandlerIf
{ 
    public void handleTrigger(boolean isInsert,boolean isUpdate,boolean isBefore, boolean isDelete,boolean isAfter)
    {
       List < Opportunity > ldupdate = new List < Opportunity > ();
        System.debug('IN trigger handler called');
    
        boolean flag=true;
        OppHelperIN leadRS= new OppHelperIN();
        
        if(Util_getPermissions.checkCustomPermission(Label.INGeneric)){
                
            if(Trigger.isbefore && Trigger.isUpdate && INTriggerRecursionCheck.inOppBefUpd == false){
                INTriggerRecursionCheck.inOppBefUpd = true;
                leadRS.updateOwner(Trigger.new);  
                leadRs.updateRetailLookups(trigger.New,Label.IN);
                /*leadRS.updatecommunityURL(Trigger.new);
                */
                leadRs.checkAddress(Trigger.new);//Added by Shashi for Address Check while booking
                leadRs.changeCustomerPhase(Trigger.new);//Added by Shashi to update customer phase of account based on Opportunity
                System.debug('After Custom phase called1');
                leadRs.changeActivityOwner(Trigger.new);//Added by Shashi to Change the owner of Activities when Opportunity owner is changed
                leadRs.updateFSOwner(Trigger.new);//Added by Shashi to update FS Opportunity Owner same as FS gate Keeper
            }
            
            if(Trigger.isbefore && Trigger.isinsert && INTriggerRecursionCheck.inOppBefIns == false){
                INTriggerRecursionCheck.inOppBefIns = true;
                leadRS.updateOwnerwithDealer(Trigger.new); 
                /*leadRS.updatecommunityURL(Trigger.new);  */
                leadRS.updateOppDeadline(Trigger.new); // Added by Prem for Opp Escalation
                leadRs.checkAddress(Trigger.new);//Added by Shashi for Address Check while booking
                leadRs.changeCustomerPhase(Trigger.new);//Added by Shashi to update customer phase of account based on Opportunity
                System.debug('After Custom phase called2');
                leadRs.changeActivityOwner(Trigger.new);//Added by Shashi to Change the owner of Activities when Opportunity owner is changed
				leadRs.updateOpportunityGeneratedBy(Trigger.new);//Added by Shashi to populate the generated by field based on created by user.
				leadRs.updateOpportunityPreferredContactDate(Trigger.new);//namitha added for preferred date update
                leadRs.updateFSOwner(Trigger.new);//Added by Shashi to update FS Opportunity Owner same as FS gate Keeper
            }
            if(Trigger.isafter && (Trigger.isinsert||Trigger.isUpdate) && INTriggerRecursionCheck.inOppAftInsUpd == false){ 
                INTriggerRecursionCheck.inOppAftInsUpd = true;
                leadRS.ShareRecordswithDealers(Trigger.new, Trigger.isupdate); 
                leadRS.CreateRetailCopy(trigger.new, (Map < Id, Opportunity > ) Trigger.OldMap, isInsert, isUpdate,label.IN);
                if (oppHelperBase.booleanCampaignUpdate) {
                    oppHelperBase.booleanCampaignUpdate = false;
                    
                    if (Trigger.isUpdate) {
                        Map < id, Opportunity > ldmap = new Map < id, Opportunity > ((Map < Id, Opportunity > ) Trigger.OldMap);
                        for (Opportunity lds: (List < Opportunity > ) Trigger.new) {
                            if (ldmap.containsKey(lds.Id) && lds.stagename != ldmap.get(lds.Id).stageName && lds.stageName == 'Closed Lost') {
                                Opportunity ldclone = new Opportunity(id = lds.Id);
                                ldclone.Lost_Date__c = system.Today();
                                ldupdate.add(ldclone);
                            }
                        }
                        if (ldupdate.size() > 0)
                            update ldupdate;
                        
                        leadRS.CdmLeadcreate(trigger.new, (Map < Id, Opportunity> ) Trigger.OldMap,label.IN);
                        
                    }
                }
                leadRs.createFSLead(Trigger.new);//Added by Shashi to create an FS lead when Sales Lead is assigned to Dealer
            }
        }
  
    }
    public void handleIntegrationTrigger(boolean isInsert,boolean isUpdate,boolean isBefore, boolean isDelete,boolean isAfter)
    {
      // Implementation to addedd as required in market
       if(Trigger.isafter && (Trigger.isinsert||Trigger.isUpdate) && INTriggerRecursionCheck.inOppAftInsUpd == false){ 
       		INTriggerRecursionCheck.inOppAftInsUpd = true;
            OppHelperIN leadRS= new OppHelperIN();
            leadRS.ShareRecordswithDealers(Trigger.new, Trigger.isupdate);
       }

    }
    
}