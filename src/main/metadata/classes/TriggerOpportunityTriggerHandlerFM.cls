/*  Class: TriggerOpportunityTriggerHandlerFM
    Created By: Kaaviya Rathinam
    Date: 2018/Oct/08
*/
public class TriggerOpportunityTriggerHandlerFM implements TriggerHandlerIf
{           //Added for FM markets

    Public User u= Utility_FM.getLoggedInUserInfo();   
    String Market=u.market__c;
    String sObjectName ;  
    public void handleTrigger(boolean isInsert,boolean isUpdate,boolean isBefore, boolean isDelete,boolean isAfter)
    {
       List < Opportunity > ldupdate = new List <Opportunity> ();
          System.debug('FM trigger handler called');

        boolean flag=true;
        OppHelperFM leadRS= new OppHelperFM();
                //Added for FMGenric for FM markets

        if(Util_getPermissions.checkCustomPermission(Label.FMGeneric)){
                system.debug('Ankit 1'+INTriggerRecursionCheck.inOppBefUpd);
            if(Trigger.isbefore && Trigger.isUpdate && INTriggerRecursionCheck.inOppBefUpd == false)
            {
                INTriggerRecursionCheck.inOppBefUpd = true;
                leadRS.updateOwner(Trigger.new);  
                leadRs.updateRetailLookups(trigger.New,Market);
                /*leadRS.updatecommunityURL(Trigger.new);                */
                leadRs.checkAddress(Trigger.new);//Added  for Address Check while booking
            // leadRs.changeCustomerPhase(Trigger.new);//Added  to update customer phase of account based on Opportunity
                System.debug('After Custom phase called1');
                //leadRs.updateFSOwner(Trigger.new);//Added to update FS Opportunity Owner same as FS gate Keeper
            }
            
            if(Trigger.isbefore && Trigger.isinsert && INTriggerRecursionCheck.inOppBefIns == false){
                INTriggerRecursionCheck.inOppBefIns = true;
                leadRS.updateOwnerwithDealer(Trigger.new); 
              
                /*leadRS.updatecommunityURL(Trigger.new);  */
                 leadRs.checkAddress(Trigger.new);//Added by Shashi for Address Check while booking
            //   leadRs.changeCustomerPhase(Trigger.new);//Added by Shashi to update customer phase of account based on Opportunity
                System.debug('After Custom phase called2');
            // leadRs.changeActivityOwner(Trigger.new);//Added by Shashi to Change the owner of Activities when Opportunity owner is changed
                leadRs.updateOpportunityGeneratedBy(Trigger.new);//Added by Shashi to populate the generated by field based on created by user.
                leadRs.updateOpportunityPreferredContactDate(Trigger.new);//namitha added for preferred date update
               // leadRs.updateFSOwner(Trigger.new);//Added by Shashi to update FS Opportunity Owner same as FS gate Keeper
            }
            
           if(Trigger.isafter && (Trigger.isinsert||Trigger.isUpdate) && INTriggerRecursionCheck.inOppAftInsUpd == false){ 
                INTriggerRecursionCheck.inOppAftInsUpd = true;
              
                leadRs.changeActivityOwner(Trigger.new);//Added by Shashi to Change the owner of Activities when Opportunity owner is changed
                leadRS.ShareRecordswithDealers(Trigger.new, Trigger.isupdate); 
                leadRS.CreateRetailCopy(trigger.new, (Map < Id, Opportunity > ) Trigger.OldMap, isInsert, isUpdate,Market);
                  //Added by Shashi to update customer phase of account based on Opportunity
               if (Trigger.isinsert) {
                    leadRs.changeCustomerPhase(Trigger.new);
                }if (oppHelperBase.booleanCampaignUpdate) {
                    oppHelperBase.booleanCampaignUpdate = false;
                    
                    if (Trigger.isUpdate) {
                        Map < id, Opportunity > ldmap = new Map < id, Opportunity > ((Map < Id, Opportunity > ) Trigger.OldMap);
                        for (Opportunity lds: (List < Opportunity > ) Trigger.new) {
                            if (ldmap.containsKey(lds.Id) && lds.stagename != ldmap.get(lds.Id).stageName && lds.stageName == 'Closed Lost') {
                                Opportunity ldclone = new Opportunity(id = lds.Id);
                                ldclone.Lost_Date__c = system.Today();
                                ldupdate.add(ldclone);
                            }
                        }
                        if (ldupdate.size() > 0)
                            update ldupdate;
                            OppHelperFM.updaterelatedOppRecord((List < Opportunity > ) trigger.new, ldmap);
                            leadRS.CdmLeadcreate(trigger.new, (Map < Id, Opportunity > ) Trigger.OldMap, Market);
                        	
                        
                                    
                    }
                    
                } 
            }
              
        }
                       
        FMMarketTriggerFactory.run(sObjectName, Market ,isInsert, isUpdate, isBefore,  isDelete, isAfter);
  
    }
    public void handleIntegrationTrigger(boolean isInsert,boolean isUpdate,boolean isBefore, boolean isDelete,boolean isAfter)
    {
        List <Opportunity> OptyNewList = Trigger.new;
        String marketcodes = Label.HandleIntegrationTriggerFMCountries;
      // Implementation to addedd as required in market
       if(Trigger.isafter && (Trigger.isinsert||Trigger.isUpdate) && INTriggerRecursionCheck.inOppAftInsUpd == false && marketcodes.contains(OptyNewList[0].market__c)){ 
            INTriggerRecursionCheck.inOppAftInsUpd = true;
            OppHelperFM leadRS= new OppHelperFM();
            leadRS.ShareRecordswithDealers(Trigger.new, Trigger.isupdate);
       }

    }
    
}